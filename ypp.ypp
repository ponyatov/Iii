%{
#include "hpp.hpp"
%}
%defines %union { Sym*o; }
%token <o> SYM NUM STR			// primitives:	symbol number 'string'
%token <o> EQ ADD SUB MUL DIV	// operators:	= + - * /
%token <o> LP RP LQ RQ			// brackets:	() []
%type <o> ex vector				// expression vector

%right EQ
%left ADD SUB
%left MUL DIV
%left PFX
%%
REPL : | REPL ex 		{ cout << $2->dump() << endl;
						  cout << $2->eval(env)->dump() << endl;
						  cout << env->dump() << endl ;
						  cout << "==================" << endl; } ;
ex : SYM | NUM | STR ;
ex : ex EQ ex			{ $$ = $2; $$->push($1); $$->push($3); } ;		// A=B
ex : ex ADD ex			{ $$ = $2; $$->push($1); $$->push($3); } ;		// A+B
ex : ex SUB ex			{ $$ = $2; $$->push($1); $$->push($3); } ;		// A-B
ex : ex MUL ex			{ $$ = $2; $$->push($1); $$->push($3); } ;		// A*B
ex : ex DIV ex			{ $$ = $2; $$->push($1); $$->push($3); } ;		// A/B
ex : ADD ex %prec PFX 	{ $$ = $1->push($2); } ;						// +A
ex : SUB ex %prec PFX 	{ $$ = $1->push($2); } ;						// -A
ex : SYM LP ex RP		{ $$=new Op("@"); $$->push($1); $$->push($3); }	// A(B)
ex : LP ex RP			{ $$ = $2; } ;									// (A)
ex : LQ vector RQ		{ $$ = $2; } ;									// {...}
vector :				{ $$ = new Vector(); } ;
vector : vector ex		{ $$ = $1; $$->push($2); }
%%
